openapi: '3.0.2'
info:
  title: API Restobook
  version: '1.0'
servers:
  - url: https://api.server.test/v1
paths:
  /restaurant:
    post:
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Ресторан для студентов
                legalEntityName:
                  type: string
                  example: ООО Накормим студентов
                inn:
                  type: integer
                  example: 991154917952
                comment:
                  type: string
                  example: Да, мы существуем и кормим студентов только лучшей едой!
        required: true
      responses:
        201:
          description: Ресторан создан
        400:
          description: Something wrong with data request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Client is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Client isn't an vendor admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Any internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      responses:
        200:
          description: Данные о всех ресторанах получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        500:
          description: Any internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /restaurant/{restaurantId}:
    get:
      description: Получить ресторан по идентификатору
      parameters:
        - name: restaurantId
          in: path
          description: Идентификатор получаемого ресторана
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Данные о нужном ресторане
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        404:
          description: Ресторан не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Имзменить данные о ресторане по идентификатору
      parameters:
        - name: restaurantId
          in: path
          description: Идентификатор изменяемого ресторана
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        204:
          description: Данные о нужном ресторане изменены
        404:
          description: Ресторан не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Получить ресторан по идентификатору
      parameters:
        - name: restaurantId
          in: path
          description: Идентификатор удаляемого ресторана
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Данные о нужном ресторане удалены
        404:
          description: Ресторан не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /{restaurantId}/employee:
    post:
      description: Создать нового сотрудника в ресторане restaurantId
      parameters:
        - name: restaurantId
          in: path
          description: Идентификатор ресторана
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                surname:
                  type: string
                patronymic:
                  type: string
                comment:
                  type: string
                changedPassword:
                  type: boolean
                restaurantId:
                  type: integer
      responses:
        201:
          description: Сотрудник создан
        401:
          description: Клиент не аутентифицирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Клиент не является администратором вендора или администратором ресторана restaurantId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Ресторан не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Any internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      description: Получить всех сотрудников в ресторане restaurantId
      parameters:
        - name: restaurantId
          in: path
          description: Идентификатор ресторана
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Данные о всех сотрудниках ресторана restaurantId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        404:
          description: Ресторан не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Any internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # /{restaurantId}/employee/{employeeId}:
  #   post:
  #   get:
  #   put:
  #   delete:

  # /{restaurantId}/table:
  #   post:
  #   get:
  #   put:
  #   delete:

  # /{restaurantId}/table/{tableId}:
  #   post:
  #   get:
  #   put:
  #   delete:

  # /{restaurantId}/reservation:
  #   post:
  #   get:
  #   put:
  #   delete:

  # /{restaurantId}/reservation/{reservationId}:
  #   post:
  #   get:
  #   put:
  #   delete:

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ресторан для студентов
        legalEntityName:
          type: string
          example: ООО Накормим студентов
        inn:
          type: integer
          example: 991154917952
        comment:
          type: string
          example: Да, мы существуем и кормим студентов только лучшей едой!

    Employee:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
        surname:
          type: string
        patronymic:
          type: string
        comment:
          type: string
        changedPassword:
          type: boolean
        restaurantId:
          type: integer

    Table:
      type: object
      properties:
        id:
          type: integer
        number:
          type: integer
        seatsNumber:
          type: integer
        state:
          type: string
        restaurantId:
          type: integer
        reservationIds:
          type: array
          items:
            type: integer

    Reservation:
      type: object
      properties:
        id:
          type: integer
        personsNumber:
          type: integer
        clientPhoneNumber:
          type: string
        clientName:
          type: string
        startDateTime:
          type: string
        durationInterval:
          type: integer
        employeeFullName:
          type: string
        creatingDateTime:
          type: string
        state:
          type: string
        comment:
          type: string
        restaurantId:
          type: integer
        tableIds:
          type: array
          items:
            type: integer

    Error:
      type: object
      properties:
        dateTime:
          type: string
        messages:
          type: array
          items:
            type: string